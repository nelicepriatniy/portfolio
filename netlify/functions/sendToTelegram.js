const BOT_TOKEN = process.env.BOT_TOKEN;
const CHAT_ID = process.env.CHAT_ID;

if (!BOT_TOKEN || !CHAT_ID) {
  console.error("–û—à–∏–±–∫–∞: –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN –∏–ª–∏ CHAT_ID –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã.");
  throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è Telegram API.");
}

export default async function handler(req, res) {
  if (req.method === 'POST') {
    try {
      const { name, contact, message } = req.body;

      if (!name || !contact) {
        console.error("–û—à–∏–±–∫–∞: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã 'name' –∏–ª–∏ 'contact' –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.");
        return res.status(400).json({ error: "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: name –∏–ª–∏ contact." });
      }

      const text = `üë§ Name: ${name}\nüìû Contact: ${contact}\nüì¨ Message: ${message || "No message provided"}`;
      const url = `https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`;

      const response = await fetch(url, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          chat_id: CHAT_ID,
          text,
        }),
      });

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç
      let responseData;
      try {
        responseData = await response.json();
      } catch (error) {
        const errorText = await response.text(); // –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –Ω–µ JSON, —Ç–æ —á–∏—Ç–∞–µ–º —Ç–µ–∫—Å—Ç
        console.error("–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç Telegram:", errorText);
        return res.status(500).json({ error: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç Telegram API", details: errorText });
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ –æ—Ç Telegram
      if (!response.ok) {
        console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram:", responseData);
        return res.status(500).json({ error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram", details: responseData });
      }

      return res.status(200).json({ message: "–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram" });

    } catch (error) {
      console.error("–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:", error);
      res.status(500).json({ error: "–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è" });
    }
  } else {
    res.setHeader("Allow", ["POST"]);
    res.status(405).json({ error: "–ú–µ—Ç–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ POST." });
  }
}
