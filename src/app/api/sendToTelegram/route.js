// src/app/api/sendToTelegram/route.js
import { NextResponse } from 'next/server';

export async function POST(req) {
  try {
    const data = await req.json();
    const botToken = process.env.TELEGRAM_BOT_TOKEN;
    const chatId = process.env.TELEGRAM_CHAT_ID;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ botToken –∏ chatId —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    if (!botToken || !chatId) {
      return NextResponse.json({ error: 'Bot token or chat ID not provided' }, { status: 400 });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π name –∏ contact
    const { name, contact, message } = data;
    if (!name || !contact) {
      return NextResponse.json({ error: 'Name or contact is missing' }, { status: 400 });
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram
    let textMessage = `
      –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–∞–π—Ç–∞:
      –ò–º—è: ${name}
      –ö–æ–Ω—Ç–∞–∫—Ç: ${contact}
    `;
    if (message) {
      textMessage += `\nüí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: ${message}`;
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Telegram API
    const response = await fetch(`https://api.telegram.org/bot${botToken}/sendMessage`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        chat_id: chatId,
        text: textMessage,
      }),
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–∞
    if (!response.ok) {
      const errorData = await response.json();
      console.error('Telegram API error:', errorData);
      return NextResponse.json({ error: 'Failed to send message' }, { status: response.status });
    }

    return NextResponse.json({ status: 'success' });
  } catch (error) {
    console.error('Error processing request:', error);
    return NextResponse.json({ error: 'Server error' }, { status: 500 });
  }
}
